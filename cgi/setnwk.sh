#!/bin/sh
# 
# setnwkcfg.sh
# Script to setup the current network interface. Parameters are passed in http URL style 
# Example:
# ./setnwk.sh /home/root/RobotHttp/ "wired_ipaddr=192.168.0.20&wired_netmask=255.255.255.0&wired_gateway=192.168.0.1&wired_dhcp=0&wired_dns=8.8.8.8"
# ./setnwk.sh /home/root/RobotHttp/ "wifi_enable=TRUE&wifi_ipaddr=192.168.0.20&wifi_netmask=255.255.255.0&wifi_gateway=192.168.0.1&wifi_dhcp=FALSE&wifi_ssid=treadstone123&wifi_passkey=testing123"
# ./setnwk.sh /home/root/RobotHttp/ "wired_dhcp=TRUE"
# ./setnwk.sh /home/root/RobotHttp/ "wifi_dhcp=1"
# ./setnwk.sh /home/root/RobotHttp/ "wifi_dhcp=TRUE&wifi_enable=TRUE"
# ./setnwk.sh /home/root/RobotHttp/ "wifi_dhcp=TRUE&wifi_enable=TRUE&wired_dhcp=TRUE"
# 
# When dhcp=1 the other parameters are irrelevant 
#
# (C) 2016-2020, Radical Electronic Systems - www.radicalsystems.co.za
# Written by Jan Zwiegers, jan@radicalsystems.co.za

HOME=$1

WIRED_IPADDR="192.168.1.20"
WIRED_NETMASK="255.255.255.0"
WIRED_GATEWAY="192.168.1.1"
WIRED_DHCP="NOTSET"
WIRED_METRIC="10"
WIRED_IFDEV=eth0

WIFI_ENABLE="FALSE"
WIFI_IPADDR="192.168.100.20"
WIFI_NETMASK="255.255.255.0"
WIFI_GATEWAY="192.168.100.1"
WIFI_DHCP="NOTSET"
WIFI_METRIC="20"
WIFI_IFDEV=wlan0
WIFI_SSID=""
WIFI_KEY=""

NTP_IPADDR=""
DNS_IPADDR=""

IFACECFGFILE=/etc/network/interfaces

PARAM=$2
OIFS="$IFS"
IFS='&'
set -- $PARAM
IFS=' '
PARAMS=$@
IFS="$OIFS"

for i in $PARAMS; do
    # process "$i"
    IFS='=';
    set -- $i;
    if [ $1 == "wired_ipaddr" ]; then
	    WIRED_IPADDR=$2
    elif [ $1 == "wired_gateway" ]; then
	    WIRED_GATEWAY=$2
    elif [ $1 == "wired_netmask" ]; then
	    WIRED_NETMASK=$2
    elif [ $1 == "wired_dhcp" ]; then
	    WIRED_DHCP=$2
    elif [ $1 == "wired_metric" ]; then
	    WIRED_METRIC=$2
    elif [ $1 == "wifi_enable" ]; then
	    WIFI_ENABLE=$2
    elif [ $1 == "wifi_ipaddr" ]; then
	    WIFI_IPADDR=$2
    elif [ $1 == "wifi_gateway" ]; then
	    WIFI_GATEWAY=$2
    elif [ $1 == "wifi_netmask" ]; then
	    WIFI_NETMASK=$2
    elif [ $1 == "wifi_dhcp" ]; then
	    WIFI_DHCP=$2
    elif [ $1 == "wifi_metric" ]; then
	    WIFI_METRIC=$2
    elif [ $1 == "wifi_ssid" ]; then
	    WIFI_SSID=$2
    elif [ $1 == "wifi_passkey" ]; then
	    WIFI_KEY=$2    
    elif [ $1 == "ntp_ipaddr" ]; then
	    NTP_IPADDR=$2
    elif [ $1 == "dns_ipaddr" ]; then
	    DNS_IPADDR=$2

#    else
#	echo -en "Unknown tag=$1 value=$2\n" >> interfaces.txt
    fi
done

IFS="$OIFS"

LOOP_IFCFG="# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)\n\n# The loopback interface\nauto lo\niface lo inet loopback\n"
WIRED_IFCFG="# Wired interface\nauto eth0"
WIFI_IFCFG="# WIFI interface\nauto wlan0"
WIFI_IFCFG_POST="\twpa-driver  wext\n\twpa-conf  /etc/wpa_supplicant.conf"

echo -e $LOOP_IFCFG > /etc/network/interfaces

if [ $WIRED_DHCP != "NOTSET" ]; then
    if [ $WIRED_DHCP == "TRUE" ]; then
        WIRED_IFCFG="$WIRED_IFCFG\niface eth0 inet dhcp\n"
    else 
        WIRED_IFCFG="$WIRED_IFCFG\niface eth0 inet static\n\taddress $WIRED_IPADDR\n\tnetmask $WIRED_NETMASK\n\tgateway $WIRED_GATEWAY\n\tmetric $WIRED_METRIC\n"
    fi

    echo -e $WIRED_IFCFG >> /etc/network/interfaces
fi

if [ $WIFI_DHCP != "NOTSET" ] && [ $WIFI_ENABLE != "FALSE" ]; then
    if [ $WIFI_DHCP == "TRUE" ]; then
        WIFI_IFCFG="$WIFI_IFCFG\niface wlan0 inet dhcp\n"
    else 
        WIFI_IFCFG="$WIFI_IFCFG\niface wlan0 inet static\n\taddress $WIFI_IPADDR\n\tnetmask $WIFI_NETMASK\n\tgateway $WIFI_GATEWAY\n\tmetric $WIFI_METRIC\n"
    fi

    WIFI_IFCFG="$WIFI_IFCFG\n$WIFI_IFCFG_POST\n"
    echo -e $WIFI_IFCFG >> /etc/network/interfaces

     if [ "$WIFI_SSID" != "" ]; then

        echo -e "ctrl_interface=/run/wpa_supplicant" > /etc/wpa_supplicant.conf
        echo -e "ctrl_interface_group=0" >> /etc/wpa_supplicant.conf
        echo -e "update_config=1" >> /etc/wpa_supplicant.conf
        wpa_passphrase $WIFI_SSID $WIFI_KEY >> /etc/wpa_supplicant.conf
        # switch AP mode
    fi
fi

echo -e "# FILE AUTOMATICALLY GENERATED BY ROBOT-T410\n" >> /etc/network/interfaces

if [ "$DNS_IPADDR" != "" ]; then
    echo -e $DNS_IPADDR > /etc/network/resolve.static.conf
fi

echo '{"status":"OK"}'

# /etc/init.d/networking restart



